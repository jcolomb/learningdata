require(rfigshare)
#options(FigshareKey = "jBkrLNsYbeov2oM09cXBBw")
#options(FigsharePrivateKey = "LhQkDeJaVJzAhWRIKYeobA")
#options(FigshareToken = "BYuYn4OjWjd8njBKCyeFXQOEAYY1MfLJ1Y0z80rVWj6AXYuYn4OjWjd8njXKCyeFXQ")
#options(FigsharePrivateToken = "aC2q4lBod3Xl52CeKwp7Fg")
#fs_auth()
metafileurl= fs_download (695950)
metafile =read.csv(metafileurl)
metafile$X1_pretest1= suppressWarnings(as.numeric (as.character(metafile$X1_pretest1)) )
metafile$X9_test3	= suppressWarnings(as.numeric (as.character(metafile$X9_test3)) )
metafile$laser.power=suppressWarnings(as.numeric (as.character(metafile$laser.power)) )
##get data with remarks out
metafile=subset (metafile, is.na(metafile$remarks))
###do all analysis again. initialisation
#setwd("/Users/choupi/Desktop/boulot/FSdata")
#setwd("~/Gits/learningdata/flightdata/analysis_R/")
numberplot=0
sink("graph/legends.txt", append=FALSE)
cat("Text for figure legends")
cat("\n")
cat("\n")
sink()
##variables
subneg=6500
additional_text = " Both a positive and a negative control were tested in parallel with this experiment."
##PKC gene
source("graph/mutant_analysis.r")
source("graph/RNAi53_inac.r")
source("graph/RNAi53_V_T.r")
###PKCi experiment
source("graph/mildHS.r")
source("graph/toostrongHS.r")
source("graph/HSelav.r")
source("graph/PKCi_nophenotype.r")
#source("graph/PKCi_phenotype.r")  ##both PKCi_d42_ok371.r and PKCi_exp16.r data together
source("graph/PKCi_d42_ok371.r")
source("graph/PKCi_exp16.r")  ##d42-c380 exp
source("graph/d42cha.r")
source("graph/GFPexp.r")  ##probably not for paper: UASGFP-> no phenotype
#P_8_2=P_8+theme(axis.text.x=element_text(size=6))
pdf("graph/results5.pdf", paper="a4")
grid.arrange(P_1, P_2, ncol=2, nrow=2)
grid.arrange(P_4, P_6,  ncol=2, nrow=2)
grid.arrange(P_7, P_8,  ncol=2, nrow=2)
grid.arrange(P_9,P_10, ncol=2, nrow=2)
#grid.arrange(P_3, P_5,P_11,  ncol=2, nrow=2)
dev.off()
#P_1+geom.line()
source("getdatafigshare.r")
getwd()
setwd("~/Gits/learningdata/flightdata/analysis_R/")
getwd()
source("getdatafigshare.r")
install.packages(c("plotrix", "MASS","vioplot", "UsingR","gplots","lattice","gdata","rfigshare"))
install.packages(c("plotrix", "MASS", "vioplot", "UsingR", "gplots",
numberplot=0
sink("graph/legends.txt", append=FALSE)
install.packages(c("plotrix", "MASS","vioplot", "UsingR","gplots","lattice","gdata","rfigshare"))
numberplot=0
sink("graph/legends.txt", append=FALSE)
cat("Text for figure legends")
cat("\n")
cat("\n")
sink()
##variables
subneg=6500
additional_text = " Both a positive and a negative control were tested in parallel with this experiment."
##PKC gene
source("graph/mutant_analysis.r")
source("graph/RNAi53_inac.r")
source("graph/RNAi53_V_T.r")
###PKCi experiment
source("graph/mildHS.r")
source("graph/toostrongHS.r")
source("graph/HSelav.r")
source("graph/PKCi_nophenotype.r")
#source("graph/PKCi_phenotype.r")  ##both PKCi_d42_ok371.r and PKCi_exp16.r data together
source("graph/PKCi_d42_ok371.r")
source("graph/PKCi_exp16.r")  ##d42-c380 exp
source("graph/d42cha.r")
source("graph/GFPexp.r")  ##probably not for paper: UASGFP-> no phenotype
#P_8_2=P_8+theme(axis.text.x=element_text(size=6))
pdf("graph/results5.pdf", paper="a4")
grid.arrange(P_1, P_2, ncol=2, nrow=2)
grid.arrange(P_4, P_6,  ncol=2, nrow=2)
grid.arrange(P_7, P_8,  ncol=2, nrow=2)
grid.arrange(P_9,P_10, ncol=2, nrow=2)
#grid.arrange(P_3, P_5,P_11,  ncol=2, nrow=2)
dev.off()
datatest2$shortname
setwd("~/Gits/learningdata/flightdata/analysis_R/")
source("getdatafigshare.r")
metafile$shortnames
metafile$shortname
###do all analysis again. initialisation
#setwd("/Users/choupi/Desktop/boulot/FSdata")
#setwd("~/Gits/learningdata/flightdata/analysis_R/")
numberplot=0
sink("graph/legends.txt", append=FALSE)
cat("Text for figure legends")
cat("\n")
cat("\n")
sink()
##variables
subneg=6500
additional_text = " Both a positive and a negative control were tested in parallel with this experiment."
##PKC gene
source("graph/mutant_analysis.r")
levels(datatest2$shortname)
metafile$shortname
setwd("~/Gits/learningdata/flightdata/analysis_R/")
#install.packages(c("plotrix", "MASS","vioplot", "UsingR","gplots","lattice","gdata","rfigshare"))
source("getdatafigshare.r")
metafile$shortname
Names= read.csv ("shortnames2.csv", header=TRUE,)[,-1]
IDshortname=fs_create ("Names of the flies used in self-learning exp.", type=("dataset"))
IDshortname=fs_create (title="Names of the flies used in self-learning exp.",description="used to make good figures" type=("dataset"))
IDshortname= fs_create (title="Names of the flies used in self-learning exp.",description="used to make good figures", type=("dataset"))
Names= read.csv ("shortnames2.csv", header=TRUE,)[,-1]
fs_upload(IDshortname,"shortnames2.csv")
IDshortname
Namesurl= fs_sownload(1552031)
Namesurl= fs_download(1552031)
Namesurl
fs_make_public(IDshortname)
Namesurl= fs_download(1552031)
Namesurl
Namesurl= fs_download(1552031)
Namesurl
Names
Names2= read.csv (Namesurl, header=TRUE,)[,-1]
Names2
Names= read.csv (Namesurl, header=TRUE,)[,-1]
Names[,3]=as.factor(gsub("RL","\n",Names[,2]))
Names[,4]=as.factor(gsub("RL","",Names[,2]))
levels(Names[,1])= c(levels(Names[,1]),levels(metafile$genotype))
#Names[,1][Names[,1]=="PKC_elav_34"]=as.factor("PKC_elav_34\xb0")
metafile$shortname=metafile$genotype
metafile$shortnamelegend = metafile$genotype
levels(metafile$shortname)= c(levels(metafile$shortname), levels(Names[,3]))
for (i in 1: length(levels(metafile$genotype))){
#print(i)
metafile$shortname[metafile$genotype==levels(metafile$genotype)[i]]= as.character(Names[Names[,1]==levels(metafile$genotype)[i],3])
}
metafile$shortname=droplevels(metafile$shortname)
levels(metafile$shortnamelegend)= c(levels(metafile$shortnamelegend), levels(Names[,4]))
for (i in 1: length(levels(metafile$genotype))){
#print(i)
metafile$shortnamelegend[metafile$genotype==levels(metafile$genotype)[i]]= as.character(Names[Names[,1]==levels(metafile$genotype)[i],4])
}
metafile$shortnamelegend =droplevels(metafile$shortnamelegend)
setwd("~/Gits/learningdata/flightdata/analysis_R/")
#install.packages(c("plotrix", "MASS","vioplot", "UsingR","gplots","lattice","gdata","rfigshare"))
source("getdatafigshare.r")
metafile$shortname
source("doallanalysis.r")
source("graph/doallanalysis.r")
source("graph/doallanalysis.r")
###do all analysis again. initialisation
#setwd("/Users/choupi/Desktop/boulot/FSdata")
#setwd("~/Gits/learningdata/flightdata/analysis_R/")
numberplot=0
sink("graph/legends.txt", append=FALSE)
cat("Text for figure legends")
cat("\n")
cat("\n")
sink()
##variables
subneg=6500
additional_text = " Both a positive and a negative control were tested in parallel with this experiment."
source("graph/mutant_analysis.r")
source("graph/RNAi53_inac.r")
source("graph/RNAi53_V_T.r")
###PKCi experiment
source("graph/mildHS.r")
source("graph/toostrongHS.r")
source("graph/HSelav.r")
source("graph/PKCi_nophenotype.r")
#source("graph/PKCi_phenotype.r")  ##both PKCi_d42_ok371.r and PKCi_exp16.r data together
source("graph/PKCi_d42_ok371.r")
source("graph/PKCi_exp16.r")  ##d42-c380 exp
source("graph/d42cha.r")
source("graph/GFPexp.r")  ##probably not for paper: UASGFP-> no phenotype
grid.arrange(P_1, P_2, ncol=2, nrow=2)
grid.arrange(P_4, P_6,  ncol=2, nrow=2)
grid.arrange(P_7, P_8,  ncol=2, nrow=2)
grid.arrange(P_9,P_10, ncol=2, nrow=2)
title="Putative mutants: no phenotype"
datatest2= metafile[metafile$experimentid %in% c("10_PKCinac_putativemutant","11_PKCdelta_putativemutant","9_PKC53_putativemutant_mi"),]
datatest2= droplevels(datatest2)
levels(datatest2$genotype)
#datatest2= datatest2[datatest2$genotype %in% c("mutant","pinac","PKC-", "pkc53" ,"PKC53e-/-" ,"wtb" ,"control","Control" ),]
#datatest2= droplevels(datatest2)
for (i in 1:length(levels(datatest2$experimentid))){
totest= subset (datatest2,datatest2$experimentid==levels(datatest2$experimentid)[i])
totest=droplevels(totest)
n= length(levels(totest$genotype))
print(paste(n,levels(datatest2$experimentid)[i]))
if (n<2) datatest2= datatest2[datatest2$experimentid != levels(datatest2$experimentid)[i],]
}
datatest2= droplevels(datatest2)
#levels(datatest2$genotype)
#neworder= c(1,3,2)
#datatest2$genotype2 <- factor(datatest2$genotype, levels = levels(datatest2$genotype)[neworder])
levels(datatest2$shortname)
neworder2= c(1,2,3,4)
datatest2$shortname <- factor(datatest2$shortname, levels = levels(datatest2$shortname)[neworder2])
levels(datatest2$genotypefull)
neworder= c(1,2,3,4)
datatest2$genotypefull2 <- factor(datatest2$genotypefull,levels = levels(datatest2$genotypefull)[neworder])
levels(datatest2$genotype2)
levels(datatest2$shortname)
levels(datatest2$genotypefull2)
source ("graph/makegraph.r")
if(is.na(subneg)){subneg=6000}
datatest2 = subset (datatest2, datatest2$X2_pretest2 > -subneg | !is.na(datatest2$X1_pretest1))
datatest2 = subset (datatest2, datatest2$X2_pretest2 <  subneg | !is.na(datatest2$X1_pretest1))
datatest2 = subset (datatest2, 10000*datatest2$mean_pretest > (-subneg+500) | is.na(datatest2$X1_pretest1))
datatest2 = subset (datatest2, 10000*datatest2$mean_pretest <  (subneg-500)| is.na(datatest2$X1_pretest1))
c=data.frame(datatest2$mean_pretest,datatest2$X2_pretest2,10000*datatest2$mean_pretest > (-subneg+500) | is.na(datatest2$X1_pretest1),
10000*datatest2$mean_pretest <  (subneg-500)| is.na(datatest2$X1_pretest1),
datatest2$X2_pretest2 > -subneg | !is.na(datatest2$X1_pretest1),
datatest2$X2_pretest2 <  subneg | !is.na(datatest2$X1_pretest1), is.na(datatest2$X1_pretest1) )
colnames (c)= c(1:7)
Pvalue <- function(x){
suppressWarnings(wt <-wilcox.test(x, alternative="two.sided"))
P=wt$p.value
ret=""
if (P<0.05) ret="*"
if (P<0.01) ret="**"
return=ret
}
#theme_set(theme_bw())
theme_jack <- function (base_size = 10, base_family = "") {
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
title = element_text(size = 12)
#axis.text = element_text(colour = "white"),
,axis.title.x = element_text(colour = "white", size=0),
axis.title.y = element_text(size=12, angle=90),
#panel.background = element_rect(fill="green"),
#panel.grid.minor.y = element_line(size=3),
axis.text.x=element_text(size=8)
,panel.grid.major = element_line(colour = "grey")#,
,axis.line=element_line()
,panel.border = element_blank()
,panel.grid.minor = element_blank()
# plot.background = element_rect(fill="red")
#,panel.grid = element_blank()
,panel.grid.major.x = element_blank()
#,axis.text.x = element_text(angle=90, vjust=0)
,legend.position = "none"
#,scale_x_continuous(expand=c(0,0))
)
}
theme_set(theme_jack())
# data.size <- ddply(datatest2, .(genotype2), summarize, n=length(score), score=median(score)-0.1) ##"score" need to be calculated at the end, need to be named score
# data.size2<- ddply(datatest2, .(genotype2), summarize , star=Pvalue(score),score=median(score)+0.05)
# #data.size
# p=ggplot(datatest2, aes(x=factor(datatest2$genotype2),y= score, fill= genotypefull2))
# p+ geom_boxplot()+ labs(x="genotype",y="PI during final test", title=title)+ ylim(-1.2, 1)+
# scale_fill_grey(start = 0.4, end = 1)
# p=ggplot(datatest2, aes(x=factor(genotype2),y= score, fill= genotype2))
# p+ geom_boxplot()+ labs(x="genotype",y="PI during final test", title=title)+ ylim(-1.2, 1)+
# scale_fill_grey(start = 0.4, end = 1)+ ##allow good bw prints
# geom_text(aes(y= -1.1,label=paste("n =", n)), data=data.size) + geom_text(aes(label=paste(star)), data=data.size2)
data.size <- ddply(datatest2, .(shortname), summarize, n=length(score), score=median(score)-0.1) ##"score" need to be calculated at the end, need to be named score
data.size2<- ddply(datatest2, .(shortname), summarize , star=Pvalue(score),score=median(score)+0.03)
p=ggplot(datatest2, aes(x=factor(shortname),y= score, fill= shortname))
plot=p+ geom_boxplot()+ labs(x="genotype",y="PI during final test", title=title)+ ylim(-1.2, 1)+
scale_fill_grey(start = 0.9, end = 0.9)+ ##allow good bw prints
scale_y_continuous(minor_breaks=NULL,breaks = seq(-1 , 1, 1) )+
geom_text(aes(y= -1.1,label=paste("n =", n)), data=data.size, size=2) + geom_text(aes(label=paste(star)), data=data.size2,size=6)
assign(paste("P_", numberplot, sep=""),plot)
#dev.off()
source("graph/doallanalysis.r")
grid.arrange(P_1, P_2, ncol=2, nrow=2)
getwd()
pdf("graph/results5.pdf", paper="a4")
grid.arrange(P_1, P_2, ncol=2, nrow=2)
grid.arrange(P_4, P_6,  ncol=2, nrow=2)
grid.arrange(P_7, P_8,  ncol=2, nrow=2)
grid.arrange(P_9,P_10, ncol=2, nrow=2)
#grid.arrange(P_3, P_5,P_11,  ncol=2, nrow=2)
dev.off()
setwd("~/Gits/learningdata/flightdata/analysis_R/")
#install.packages(c("plotrix", "MASS","vioplot", "UsingR","gplots","lattice","gdata","rfigshare"))
source("getdatafigshare.r")
#metafile$shortname
## need to put shortnames on figshare and get it back from there
## empty getdata.r, which is called in each sub-analysis
#IDshortname= fs_create (title="Names of the flies used in self-learning exp.",description="used to make good figures", type=("dataset"))
#fs_upload(IDshortname,"shortnames2.csv")
source("graph/doallanalysis.r")
P_1
###do all analysis again. initialisation
#setwd("/Users/choupi/Desktop/boulot/FSdata")
#setwd("~/Gits/learningdata/flightdata/analysis_R/")
numberplot=0
sink("graph/legends.txt", append=FALSE)
cat("Text for figure legends")
cat("\n")
cat("\n")
sink()
##variables
subneg=6500
additional_text = " Both a positive and a negative control were tested in parallel with this experiment."
##PKC gene
source("graph/mutant_analysis.r")
source("graph/RNAi53_inac.r")
source("graph/RNAi53_V_T.r")
###PKCi experiment
source("graph/mildHS.r")
source("graph/toostrongHS.r")
source("graph/HSelav.r")
source("graph/PKCi_nophenotype.r")
#source("graph/PKCi_phenotype.r")  ##both PKCi_d42_ok371.r and PKCi_exp16.r data together
source("graph/PKCi_d42_ok371.r")
source("graph/PKCi_exp16.r")  ##d42-c380 exp
source("graph/d42cha.r")
source("graph/GFPexp.r")  ##probably not for paper: UASGFP-> no phenotype
#P_8_2=P_8+theme(axis.text.x=element_text(size=6))
pdf("graph/results4.pdf", paper="a4")
grid.arrange(P_1, P_2, ncol=2, nrow=2)
grid.arrange(P_4, P_6,  ncol=2, nrow=2)
grid.arrange(P_7, P_8,  ncol=2, nrow=2)
grid.arrange(P_9,P_10, ncol=2, nrow=2)
#grid.arrange(P_3, P_5,P_11,  ncol=2, nrow=2)
dev.off()
#P_1+geom.line()
getwd()
###do all analysis again. initialisation
#setwd("/Users/choupi/Desktop/boulot/FSdata")
#setwd("~/Gits/learningdata/flightdata/analysis_R/")
numberplot=0
sink("graph/legends.txt", append=FALSE)
cat("Text for figure legends")
cat("\n")
cat("\n")
sink()
##variables
subneg=6500
additional_text = " Both a positive and a negative control were tested in parallel with this experiment."
setwd("~/Gits/learningdata/flightdata/analysis_R/")
#install.packages(c("plotrix", "MASS","vioplot", "UsingR","gplots","lattice","gdata","rfigshare"))
source("getdatafigshare.r")
#metafile$shortname
## need to put shortnames on figshare and get it back from there
## empty getdata.r, which is called in each sub-analysis
#IDshortname= fs_create (title="Names of the flies used in self-learning exp.",description="used to make good figures", type=("dataset"))
#fs_upload(IDshortname,"shortnames2.csv")
source("graph/doallanalysis.r")
source("getdatafigshare.r")
source("getdatafigshare.r")
metafileurl= fs_download (695950)
fs_auth()
require(rfigshare)
options(FigshareKey = "jBkrLNsYbeov2oM09cXBBw")
ptions(FigsharePrivateKey = "LhQkDeJaVJzAhWRIKYeobA")
#options(FigshareToken = "BYuYn4OjWjd8njBKCyeFXQOEAYY1MfLJ1Y0z80rVWj6AXYuYn4OjWjd8njXKCyeFXQ")
#options(FigsharePrivateToken = "aC2q4lBod3Xl52CeKwp7Fg")
fs_auth()
metafileurl= fs_download (695950)
metafile =read.csv(metafileurl)
metafile$X1_pretest1= suppressWarnings(as.numeric (as.character(metafile$X1_pretest1)) )
metafile$X9_test3	= suppressWarnings(as.numeric (as.character(metafile$X9_test3)) )
metafile$laser.power=suppressWarnings(as.numeric (as.character(metafile$laser.power)) )
##get data with remarks out
metafile=subset (metafile, is.na(metafile$remarks))
setwd("~/Gits/learningdata/flightdata/analysis_R/")
#install.packages(c("plotrix", "MASS","vioplot", "UsingR","gplots","lattice","gdata","rfigshare"))
source("getdatafigshare.r")
#metafile$shortname
## need to put shortnames on figshare and get it back from there
## empty getdata.r, which is called in each sub-analysis
#IDshortname= fs_create (title="Names of the flies used in self-learning exp.",description="used to make good figures", type=("dataset"))
#fs_upload(IDshortname,"shortnames2.csv")
source("graph/doallanalysis.r")
source("graph/mutant_analysis.r")
#setwd("/Users/choupi/Desktop/boulot/FSdata")
source("graph/getdata.r")
title="Putative mutants: no phenotype"
datatest2= metafile[metafile$experimentid %in% c("10_PKCinac_putativemutant","11_PKCdelta_putativemutant","9_PKC53_putativemutant_mi"),]
datatest2= droplevels(datatest2)
levels(datatest2$genotype)
#datatest2= datatest2[datatest2$genotype %in% c("mutant","pinac","PKC-", "pkc53" ,"PKC53e-/-" ,"wtb" ,"control","Control" ),]
#datatest2= droplevels(datatest2)
for (i in 1:length(levels(datatest2$experimentid))){
totest= subset (datatest2,datatest2$experimentid==levels(datatest2$experimentid)[i])
totest=droplevels(totest)
n= length(levels(totest$genotype))
print(paste(n,levels(datatest2$experimentid)[i]))
if (n<2) datatest2= datatest2[datatest2$experimentid != levels(datatest2$experimentid)[i],]
}
datatest2= droplevels(datatest2)
#levels(datatest2$genotype)
#neworder= c(1,3,2)
#datatest2$genotype2 <- factor(datatest2$genotype, levels = levels(datatest2$genotype)[neworder])
levels(datatest2$shortname)
neworder2= c(1,2,3,4)
datatest2$shortname <- factor(datatest2$shortname, levels = levels(datatest2$shortname)[neworder2])
setwd("~/Gits/learningdata/flightdata/analysis_R/")
#install.packages(c("plotrix", "MASS","vioplot", "UsingR","gplots","lattice","gdata","rfigshare"))
source("getdatafigshare.r")
#metafile$shortname
## need to put shortnames on figshare and get it back from there
## empty getdata.r, which is called in each sub-analysis
#IDshortname= fs_create (title="Names of the flies used in self-learning exp.",description="used to make good figures", type=("dataset"))
#fs_upload(IDshortname,"shortnames2.csv")
source("getdatafigshare.r")
