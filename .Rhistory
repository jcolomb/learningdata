source("getdatafigshare.r")
setwd("~/Gits/learningdata/flightdata/analysis_R/")
#install.packages(c("plotrix", "MASS","vioplot", "UsingR","gplots","lattice","gdata","rfigshare"))
source("getdatafigshare.r")
source("getdatafigshare.r")
source("graph/doallanalysis.r")
P_1
P_1(main="testing")
class(P_1)
as.data.frame(P_1)
P_1$theme
P_1$labels
P_1$labels$title= paste("A",P_1$labels$title)
P_1
source(Mastercode.r)
getwd()
source(Mastercode.r)
source("Mastercode.r")
P_1$labels$ggtitle=('a')
P_1
P_1$labels
grid.arrange(P_1, P_2, ncol=2, nrow=2)
P_1+ ggtitle('a') + theme(plot.title=element_text(hjust=0)
)
P_1+ ggtitle('A')
P_1
P_1+ facet_wrap(~lab1) +theme(strip.text = element_text(hjust = 0.05))
P_1+ facet_wrap(A") +theme(strip.text = element_text(hjust = 0.05))
)
P_1+ facet_wrap("A") +theme(strip.text = element_text(hjust = 0.05))
P_1+ facet_wrap("A") +theme(strip.text = element_text(hjust = 0.05))
df = data.frame(gp = factor(rep(letters[1:3], each = 10)), y = rnorm(30))
df$lab1 <- 'a'
df$lab2 <- 'b'
p = ggplot(df) + geom_point(aes(x = gp, y = y)) + facet_wrap(~lab1)
p2 = ggplot(df) + geom_point(aes(x = y, y = gp)) + facet_wrap(~lab2)
j <- theme(strip.text = element_text(hjust = 0.05))
grid.arrange(p + j, p2 + j, ncol = 2)
P_1+ ggsubtitle('A') + theme(plot.subtitle=element_text(hjust=0)
)
ggtitle
labs
p <- P_1 + ggtitle(expression(atop(paste('TITLE'), atop(italic(paste('SUBTITLE')), ""))))
p
z <- arrangeGrob(P_1, main = textGrob("Rainfall",                                  gp = gpar(fontsize = 25, face = "bold", col = "black")))
library(gridExtra)
z <- arrangeGrob(P_1, main = textGrob("Rainfall",                                  gp = gpar(fontsize = 25, face = "bold", col = "black")))
??textgrob
library(grid)
z <- arrangeGrob(P_1, main = textGrob("Rainfall",                                  gp = gpar(fontsize = 25, face = "bold", col = "black")))
z
P_1
z
z <- arrangeGrob(m, main = textGrob("Rainfall",
gp = gpar(fontsize = 25, face = "bold", col = "black")))
z
z <- arrangeGrob(P_1, main = textGrob("Rainfall",
gp = gpar(fontsize = 25, face = "bold", col = "black")))
z
#P_1+geom.line()
?atop
?arrangeGrob
grid.arrange
grid.arrange()
grid.arrange(P_1, P_2, ncol=2, nrow=2, main =textGrob("A"))
grid.arrange(P_1, main =textGrob("A"), P_2, main =textGrob("A"), ncol=2, nrow=2, main =textGrob("A"))
grid.arrange(P_1, main =textGrob("A"), P_2, main =textGrob("A"), ncol=2, nrow=2)
setwd("~/Gits/learningdata/flightdata/analysis_R/")
#install.packages(c("plotrix", "MASS","vioplot", "UsingR","gplots","lattice","gdata","rfigshare"))
source("getdatafigshare.r")
#metafile$shortname
## need to put shortnames on figshare and get it back from there
## empty getdata.r, which is called in each sub-analysis
#IDshortname= fs_create (title="Names of the flies used in self-learning exp.",description="used to make good figures", type=("dataset"))
#fs_upload(IDshortname,"shortnames2.csv")
source("graph/doallanalysis.r")
grid.arrange(P_1, P_2, , ncol=2, nrow=2, left =textGrob("A"))
grid.arrange(P_1, P_2,  ncol=2, nrow=2, left =textGrob("A"))
library(grid)
grid.arrange(P_1, P_2,  ncol=2, nrow=2, left =textGrob("A"))
grid.arrange(P_1, P_2,  ncol=2, nrow=2, left =textGrob("A"))
grid.arrange(P_4, P_6,  ncol=2, nrow=2)
P_1
dev.off()
grid.arrange(P_1, P_2,  ncol=2, nrow=2, left =textGrob("A"))
grid.arrange(P_1, P_2,  ncol=2, nrow=2, labels=c("A", "B"))
plot_grid(P_1, P_2, labels=c("A", "B"), ncol = 2, nrow = 1)
require(cowpolt)
install.packages("cowplot")
require(cowpolt)
plot_grid(P_1, P_2, labels=c("A", "B"), ncol = 2, nrow = 1)
library(cowpolt)
install.packages("cowplot")
library(cowpolt)
nstall.packages("cowplot")
install.packages("cowplot")
library("cowplot")
plot_grid(P_1, P_2, labels=c("A", "B"), ncol = 2, nrow = 1)
plot_grid(P_1, P_2, labels=c("A", "B"), ncol = 2, nrow = 2)
pdf("graph/results4.pdf", paper="a4")
plot_grid(P_1, P_2, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_4, P_6, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_7, P_8,P_11 labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_3, P_5,P_9,P_10, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
#grid.arrange(P_1, P_2,  ncol=2, nrow=2, left =textGrob("A"))
#grid.arrange(P_4, P_6,  ncol=2, nrow=2)
#grid.arrange(P_7, P_8,  ncol=2, nrow=2)
#grid.arrange(P_9,P_10, ncol=2, nrow=2)
#grid.arrange(P_3, P_5,P_11,  ncol=2, nrow=2)
dev.off()
pdf("graph/results4.pdf", paper="a4")
plot_grid(P_1, P_2, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_4, P_6, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_7, P_8,P_11, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_3, P_5,P_9,P_10, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
#grid.arrange(P_1, P_2,  ncol=2, nrow=2, left =textGrob("A"))
#grid.arrange(P_4, P_6,  ncol=2, nrow=2)
#grid.arrange(P_7, P_8,  ncol=2, nrow=2)
#grid.arrange(P_9,P_10, ncol=2, nrow=2)
#grid.arrange(P_3, P_5,P_11,  ncol=2, nrow=2)
dev.off()
grid.arrange(P_1, P_2,  ncol=2, nrow=2, left =textGrob("A"))
grid.arrange(P_1, P_2,  ncol=2, nrow=2, left =textGrob("A"))
P_1
grid.arrange(P_1, P_2,  ncol=2, nrow=2, left =textGrob("A"))
P_1
###do all analysis again. initialisation
#setwd("/Users/choupi/Desktop/boulot/FSdata")
#setwd("~/Gits/learningdata/flightdata/analysis_R/")
numberplot=0
sink("graph/legends.txt", append=FALSE)
cat("Text for figure legends")
cat("\n")
cat("\n")
sink()
##variables
subneg=6500
additional_text = " Both a positive and a negative control were tested in parallel with this experiment."
##PKC gene
source("graph/mutant_analysis.r")
source("graph/RNAi53_inac.r")
source("graph/RNAi53_V_T.r")
###PKCi experiment
source("graph/mildHS.r")
source("graph/toostrongHS.r")
source("graph/HSelav.r")
source("graph/PKCi_nophenotype.r")
#source("graph/PKCi_phenotype.r")  ##both PKCi_d42_ok371.r and PKCi_exp16.r data together
source("graph/PKCi_d42_ok371.r")
source("graph/PKCi_exp16.r")  ##d42-c380 exp
source("graph/d42cha.r")
source("graph/GFPexp.r")  ##probably not for paper: UASGFP-> no phenotype
#P_8_2=P_8+theme(axis.text.x=element_text(size=6))
library(cowpolt)
grid.arrange(P_1, P_2,  ncol=2, nrow=2, left =textGrob("A"))
plot_grid(P_1, P_2, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
pdf("graph/results4.pdf", paper="a4")
plot_grid(P_1, P_2, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_4, P_6, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_7, P_8,P_11, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_3, P_5,P_9,P_10, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
#grid.arrange(P_1, P_2,  ncol=2, nrow=2, left =textGrob("A"))
#grid.arrange(P_4, P_6,  ncol=2, nrow=2)
#grid.arrange(P_7, P_8,  ncol=2, nrow=2)
#grid.arrange(P_9,P_10, ncol=2, nrow=2)
#grid.arrange(P_3, P_5,P_11,  ncol=2, nrow=2)
dev.off()
vp <- P_1 +
geom_violin()+
geom_boxplot(width=0.1)
vp
P_1
vp <- P_1 +
geom_violin(width=0.1)
vp
geom_violin
?geom_violin
vp <- P_1 +
geom_violin(width=0.5, fill="none")
vp
p=P_1
p + geom_violin(aes(fill = cyl))
p + geom_violin(aes(fill = factor(cyl)))
p + geom_violin(aes(fill = factor(vs)))
p + geom_violin(aes(fill = factor(am)))
cyl=c(1,2,3)
p + geom_violin(aes(fill = cyl))
p + geom_violin(aes(fill = factor(cyl)))
p + geom_violin(aes(fill = factor(vs)))
p + geom_violin(aes(fill = factor(am)))
cyl=1
p + geom_violin(aes(fill = cyl))
p + geom_violin(aes(fill = factor(cyl)))
p + geom_violin(aes(fill = factor(vs)))
p + geom_violin(aes(fill = factor(am)))
vp <- P_1 +
geom_violin(width=0.5, alpha=10)
vp
vp <- P_1 +
geom_violin(width=0.5, alpha=0.10)
vp
###do all analysis again. initialisation
#setwd("/Users/choupi/Desktop/boulot/FSdata")
#setwd("~/Gits/learningdata/flightdata/analysis_R/")
numberplot=0
sink("graph/legends.txt", append=FALSE)
cat("Text for figure legends")
cat("\n")
cat("\n")
sink()
##variables
subneg=6500
additional_text = " Both a positive and a negative control were tested in parallel with this experiment."
##PKC gene
source("graph/mutant_analysis.r")
source("graph/RNAi53_inac.r")
source("graph/RNAi53_V_T.r")
###PKCi experiment
source("graph/mildHS.r")
source("graph/toostrongHS.r")
source("graph/HSelav.r")
source("graph/PKCi_nophenotype.r")
#source("graph/PKCi_phenotype.r")  ##both PKCi_d42_ok371.r and PKCi_exp16.r data together
source("graph/PKCi_d42_ok371.r")
source("graph/PKCi_exp16.r")  ##d42-c380 exp
source("graph/d42cha.r")
source("graph/GFPexp.r")  ##probably not for paper: UASGFP-> no phenotype
#P_8_2=P_8+theme(axis.text.x=element_text(size=6))
library(cowpolt)
pdf("graph/results5.pdf", paper="a4")
plot_grid(P_1, P_2, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_4, P_6, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_7, P_8,P_11, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_3, P_5,P_9,P_10, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
#grid.arrange(P_1, P_2,  ncol=2, nrow=2, left =textGrob("A"))
#grid.arrange(P_4, P_6,  ncol=2, nrow=2)
#grid.arrange(P_7, P_8,  ncol=2, nrow=2)
#grid.arrange(P_9,P_10, ncol=2, nrow=2)
#grid.arrange(P_3, P_5,P_11,  ncol=2, nrow=2)
dev.off()
#P_1+ facet_wrap("A") +theme(strip.text = element_text(hjust = 0.05))
#P_1+ ggtitle('A') + theme(plot.title=element_text(hjust=0))
# not working: fraction as title
#p <- P_1 + ggtitle(expression(atop(paste('TITLE'), atop(italic(paste('SUBTITLE')), ""))))
#library(grid)
#z <- arrangeGrob(P_1, main = textGrob("Rainfall",
gp = gpar(fontsize = 25, face = "bold", col = "black")))
#P_1+geom.line()
#grid.arrange(P_1, P_2,  ncol=2, nrow=2, labels=c("A", "B"))
plot_grid(P_1, P_2, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot+
geom_violin(width=0.5, alpha=0.10, colour=2)
plot+
geom_violin(width=0.5, alpha=0.10, colour="grey")
###do all analysis again. initialisation
#setwd("/Users/choupi/Desktop/boulot/FSdata")
#setwd("~/Gits/learningdata/flightdata/analysis_R/")
numberplot=0
sink("graph/legends.txt", append=FALSE)
cat("Text for figure legends")
cat("\n")
cat("\n")
sink()
##variables
subneg=6500
additional_text = " Both a positive and a negative control were tested in parallel with this experiment."
##PKC gene
source("graph/mutant_analysis.r")
source("graph/RNAi53_inac.r")
source("graph/RNAi53_V_T.r")
###PKCi experiment
source("graph/mildHS.r")
source("graph/toostrongHS.r")
source("graph/HSelav.r")
source("graph/PKCi_nophenotype.r")
#source("graph/PKCi_phenotype.r")  ##both PKCi_d42_ok371.r and PKCi_exp16.r data together
source("graph/PKCi_d42_ok371.r")
source("graph/PKCi_exp16.r")  ##d42-c380 exp
source("graph/d42cha.r")
source("graph/GFPexp.r")  ##probably not for paper: UASGFP-> no phenotype
#P_8_2=P_8+theme(axis.text.x=element_text(size=6))
library(cowpolt)
pdf("graph/results5.pdf", paper="a4")
plot_grid(P_1, P_2, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_4, P_6, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_7, P_8,P_11, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_3, P_5,P_9,P_10, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
#grid.arrange(P_1, P_2,  ncol=2, nrow=2, left =textGrob("A"))
#grid.arrange(P_4, P_6,  ncol=2, nrow=2)
#grid.arrange(P_7, P_8,  ncol=2, nrow=2)
#grid.arrange(P_9,P_10, ncol=2, nrow=2)
#grid.arrange(P_3, P_5,P_11,  ncol=2, nrow=2)
dev.off()
#P_1+ facet_wrap("A") +theme(strip.text = element_text(hjust = 0.05))
#P_1+ ggtitle('A') + theme(plot.title=element_text(hjust=0))
# not working: fraction as title
#p <- P_1 + ggtitle(expression(atop(paste('TITLE'), atop(italic(paste('SUBTITLE')), ""))))
#library(grid)
#z <- arrangeGrob(P_1, main = textGrob("Rainfall",
gp = gpar(fontsize = 25, face = "bold", col = "black")))
#P_1+geom.line()
#grid.arrange(P_1, P_2,  ncol=2, nrow=2, labels=c("A", "B"))
plot_grid(P_1, P_2, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
source("Mastercode.r")
library("cowpolt")
library(cowpolt)
library(cowplot)
plot_grid(P_1, P_2, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
###do all analysis again. initialisation
#setwd("/Users/choupi/Desktop/boulot/FSdata")
#setwd("~/Gits/learningdata/flightdata/analysis_R/")
numberplot=0
sink("graph/legends.txt", append=FALSE)
cat("Text for figure legends")
cat("\n")
cat("\n")
sink()
##variables
subneg=6500
additional_text = " Both a positive and a negative control were tested in parallel with this experiment."
library(cowplot)
##PKC gene
source("graph/mutant_analysis.r")
source("graph/RNAi53_inac.r")
source("graph/RNAi53_V_T.r")
###PKCi experiment
source("graph/mildHS.r")
source("graph/toostrongHS.r")
source("graph/HSelav.r")
source("graph/PKCi_nophenotype.r")
#source("graph/PKCi_phenotype.r")  ##both PKCi_d42_ok371.r and PKCi_exp16.r data together
source("graph/PKCi_d42_ok371.r")
source("graph/PKCi_exp16.r")  ##d42-c380 exp
source("graph/d42cha.r")
source("graph/GFPexp.r")  ##probably not for paper: UASGFP-> no phenotype
##comment for knitr
#P_8_2=P_8+theme(axis.text.x=element_text(size=6))
#
# pdf("graph/results5.pdf", paper="a4")
# plot_grid(P_1, P_2, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
# plot_grid(P_4, P_6, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
# plot_grid(P_7, P_8,P_11, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
# plot_grid(P_3, P_5,P_9,P_10, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
# #grid.arrange(P_1, P_2,  ncol=2, nrow=2, left =textGrob("A"))
# #grid.arrange(P_4, P_6,  ncol=2, nrow=2)
# #grid.arrange(P_7, P_8,  ncol=2, nrow=2)
#
# #grid.arrange(P_9,P_10, ncol=2, nrow=2)
# #grid.arrange(P_3, P_5,P_11,  ncol=2, nrow=2)
# dev.off()
plot_grid(P_4, P_5, P_6, P_7 labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_4, P_5, P_6, P_7, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_7, P_8,P_11, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_3, P_5,P_9,P_10, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(P_8, P_9, P_10, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
sourcefolder="/Users/colombj/Gits/learningdata/flightdata/analysis_R"
#datafolder="~/Desktop/boulot/FSdata"
require(rfigshare)
fs_auth()
id= 695950
##first time to get the data on figshare
# setwd(sourcefolder)
# fs_upload(id, "metafile.csv")
file= fs_download(id)
metafile= read.csv (file, header=TRUE)[,-1]
metafile$X1_pretest1= suppressWarnings(as.numeric (as.character(metafile$X1_pretest1)) )
metafile$X9_test3  = suppressWarnings(as.numeric (as.character(metafile$X9_test3)) )
metafile$laser.power=suppressWarnings(as.numeric (as.character(metafile$laser.power)) )
if(is.null(metafile$figshareid[1])){
metafile$figshareid= rep(NA,length(metafile$laser.power))
}
newmetafile=metafile
i=1
MINE=TRUE
for (i in c(1: length(levels(metafile$experimentid)))){
thisexp= levels(metafile$experimentid)[i]
submetaf = subset(newmetafile, newmetafile$experimentid == thisexp)
submetaf=droplevels(submetaf)
## creating or recuperating figshareid
if(is.na(submetaf$figshareid[1])){
thisfigshareid=fs_create(
paste("rawfiles for ", thisexp),
"This data is raw data from flight experiment, see the metadata figshare article for a description. data start at line 21, data is in 4 rows: time, torque, is_laser_on, sequence_ number (meaning depends on the protocol, usually 2 min. periods).",
type = "fileset",
)
fs_add_authors(thisfigshareid,list("96464","97229"))
}else{thisfigshareid=submetaf$figshareid[1]}
#thisfigshareid=829574
setwd(datafolder)
## get list of data already uploaded
detail=fs_details(thisfigshareid, mine = MINE)
a=sapply(detail$files, function(x) x$name)
### loop to upload each file not already up
for (j in c(1: length(submetaf$rawfilename))){
if (all(!grepl(submetaf$rawfilename[j],a))){
data = submetaf$rawfilename[j]
if (!data== "not_accessible"){
fs_upload(thisfigshareid, file = paste("alldata",submetaf$rawfilename[j], sep="/"))
}
}else{print("already uploaded")}
}
### endloop to upload each file not already up
submetaf$figshareid[submetaf$rawfilename!="not_accessible"]= thisfigshareid
newmetafile = subset(newmetafile, newmetafile$experimentid != thisexp)
newmetafile = rbind(newmetafile,submetaf)
#write.csv (newmetafile, file = "metafile.csv")
fs_add_categories(thisfigshareid, "neurobiology")
fs_make_public(thisfigshareid)
#read.csv(paste("alldata",submetaf$rawfilename[j], sep="/"))
}
for (i in c(1: length(levels(metafile$experimentid)))){
thisexp= levels(metafile$experimentid)[i]
submetaf = subset(newmetafile, newmetafile$experimentid == thisexp)
submetaf=droplevels(submetaf)
## creating or recuperating figshareid
if(is.na(submetaf$figshareid[1])){
thisfigshareid=fs_create(
paste("rawfiles for ", thisexp),
"This data is raw data from flight experiment, see the metadata figshare article for a description. data start at line 21, data is in 4 rows: time, torque, is_laser_on, sequence_ number (meaning depends on the protocol, usually 2 min. periods).",
type = "fileset",
)
fs_add_authors(thisfigshareid,list("96464","97229"))
}else{thisfigshareid=submetaf$figshareid[1]}
#thisfigshareid=829574
#setwd(datafolder)
## get list of data already uploaded
detail=fs_details(thisfigshareid, mine = MINE)
a=sapply(detail$files, function(x) x$name)
### loop to upload each file not already up
for (j in c(1: length(submetaf$rawfilename))){
if (all(!grepl(submetaf$rawfilename[j],a))){
data = submetaf$rawfilename[j]
if (!data== "not_accessible"){
fs_upload(thisfigshareid, file = paste("alldata",submetaf$rawfilename[j], sep="/"))
}
}else{print("already uploaded")}
}
### endloop to upload each file not already up
submetaf$figshareid[submetaf$rawfilename!="not_accessible"]= thisfigshareid
newmetafile = subset(newmetafile, newmetafile$experimentid != thisexp)
newmetafile = rbind(newmetafile,submetaf)
#write.csv (newmetafile, file = "metafile.csv")
fs_add_categories(thisfigshareid, "neurobiology")
fs_make_public(thisfigshareid)
#read.csv(paste("alldata",submetaf$rawfilename[j], sep="/"))
}
for (i in c(1: length(levels(metafile$experimentid)))){
thisexp= levels(metafile$experimentid)[i]
submetaf = subset(newmetafile, newmetafile$experimentid == thisexp)
submetaf=droplevels(submetaf)
## creating or recuperating figshareid
if(is.na(submetaf$figshareid[1])){
thisfigshareid=fs_create(
paste("rawfiles for ", thisexp),
"This data is raw data from flight experiment, see the metadata figshare article for a description. data start at line 21, data is in 4 rows: time, torque, is_laser_on, sequence_ number (meaning depends on the protocol, usually 2 min. periods).",
type = "fileset",
)
fs_add_authors(thisfigshareid,list("96464","97229"))
}else{thisfigshareid=submetaf$figshareid[1]}
#thisfigshareid=829574
#setwd(datafolder)
## get list of data already uploaded
detail=fs_details(thisfigshareid, mine = MINE)
a=sapply(detail$files, function(x) x$name)
### loop to upload each file not already up
for (j in c(1: length(submetaf$rawfilename))){
if (all(!grepl(submetaf$rawfilename[j],a))){
data = submetaf$rawfilename[j]
if (!data== "not_accessible"){
fs_upload(thisfigshareid, file = paste("alldata",submetaf$rawfilename[j], sep="/"))
}
}else{print("already uploaded")}
}
### endloop to upload each file not already up
submetaf$figshareid[submetaf$rawfilename!="not_accessible"]= thisfigshareid
newmetafile = subset(newmetafile, newmetafile$experimentid != thisexp)
newmetafile = rbind(newmetafile,submetaf)
#write.csv (newmetafile, file = "metafile.csv")
fs_add_categories(thisfigshareid, "Neuroscience")
fs_make_public(thisfigshareid)
#read.csv(paste("alldata",submetaf$rawfilename[j], sep="/"))
}
i=1
require(rfigshare)
fs_auth()
id= 695950
##first time to get the data on figshare
# setwd(sourcefolder)
# fs_upload(id, "metafile.csv")
file= fs_download(id)
metafile= read.csv (file, header=TRUE)[,-1]
metafile$X1_pretest1= suppressWarnings(as.numeric (as.character(metafile$X1_pretest1)) )
metafile$X9_test3  = suppressWarnings(as.numeric (as.character(metafile$X9_test3)) )
metafile$laser.power=suppressWarnings(as.numeric (as.character(metafile$laser.power)) )
if(is.null(metafile$figshareid[1])){
metafile$figshareid= rep(NA,length(metafile$laser.power))
}
thisexp= levels(metafile$experimentid)[i]
submetaf = subset(newmetafile, newmetafile$experimentid == thisexp)
submetaf = subset(metafile, metafile$experimentid == thisexp)
submetaf=droplevels(submetaf)
thisfigshareid=submetaf$figshareid[1]
fs_update(thisfigshareid, title = paste("raw data for a Drosophila self-learning expriment in the torque meter:", thisexp)
)
for (i in c(1: length(levels(metafile$experimentid)))){
thisexp= levels(metafile$experimentid)[i]
submetaf = subset(metafile, metafile$experimentid == thisexp)
submetaf=droplevels(submetaf)
thisfigshareid=submetaf$figshareid[1]
fs_update(thisfigshareid, title = paste("raw data for a Drosophila self-learning expriment in the torque meter:", thisexp)
)
}
